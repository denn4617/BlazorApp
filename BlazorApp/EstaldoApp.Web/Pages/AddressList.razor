@page "/"
@using EstaldoApp.Models
@inherits AddressListBase

<h3>Address List</h3>
@* SEARCH FIELD FOR ADRESSES *@
<label for='adresse-input'>Autocomplete af adresse:</label>
<div class='autocomplete-container'>
  <input type="text" placeholder="Search.." list="adresser" id="adresse-input" @bind="inputVal"
         @oninput="@(async (e) => { inputVal = (String) e.Value; Adresser = await GetAddresses(inputVal, side.ToString()); DisplayDiv = true;})">
</div>


@* DROPDOWN FOR SEARCH FIELD *@
@if (Adresser != null && DisplayDiv)
{
  <div id="adresseDropdown">
    @foreach (var rootAdresse in Adresser)
    {
      <div class="adresse-dropdown-item" @onclick="@(async () => { ClickOnAddress(rootAdresse);})">
        @rootAdresse.tekst
      </div>
    }
  </div>
}

@* SELECTED ADDRESS INFORMATION *@
<div class="card" style="width: 18rem;">
  <div class="card-header">
    @if (SelectedAddressInformation == null)
    {
      <div>Text</div>
    }
    else
    {
      <div>@SelectedAddressInformation.adressebetegnelse</div>
    }
  </div>
  <ul class="list-group list-group-flush">
    <li class="list-group-item">Cras justo odio</li>
    <li class="list-group-item">Dapibus ac facilisis in</li>
    <li class="list-group-item">Vestibulum at eros</li>
  </ul>
</div>

@* ADRESSES ON SAME STREET *@
@if (SortedAdresser != null)
{
  <table class="table  table-striped table-sm">
    <thead>
    <tr>
      <th scope="col">Addresses on same street</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var rootAdresse in SortedAdresser)
    {
      <tr>
        <td>@rootAdresse.tekst</td>
      </tr>
    }
    </tbody>
  </table>
  <div class="pagination">
    <a onclick="@GoToPreviousPage">&laquo;</a>
    <p>@side</p>
    <a onclick="@GoToNextPage">&raquo;</a>
  </div>
}

@code{
  private int LengthOfAddressList;
  private IEnumerable<AddressRootObject> AmountOfAddresses;
  private bool DisplayDiv = false;
  private AddressRootObject SelectedAddress;

  private async void ClickOnAddress(AddressRootObject rootAdresse)
  {
    side = 1;
    Console.WriteLine(side + "ONCLICK#####");
    AmountOfAddresses = await GetEveryAddress(rootAdresse.adresse.vejkode, rootAdresse.adresse.kommunekode);
    LengthOfAddressList = AmountOfAddresses.Count();
    Console.WriteLine(LengthOfAddressList + "!!!!!!!!!!!!!!!!!!!!!!!");
    SortedAdresser = await GetSortedAddresses(rootAdresse.adresse.vejkode, rootAdresse.adresse.kommunekode, side.ToString());
    DisplayDiv = false;
    SelectedAddress = rootAdresse;
    await GetAddressInformation(rootAdresse.adresse.id);
  }

  private async void GoToPreviousPage()
  {
    side--;
    SortedAdresser = await GetSortedAddresses(SelectedAddress.adresse.vejkode, SelectedAddress.adresse.kommunekode, side.ToString());
    Console.WriteLine(side + "-------------------");
  }

  private async void GoToNextPage()
  {
    side++;
    SortedAdresser = await GetSortedAddresses(SelectedAddress.adresse.vejkode, SelectedAddress.adresse.kommunekode, side.ToString());
    Console.WriteLine(side + "++++++++++++++++++");
  }

}